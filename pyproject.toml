[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "qiskit-aqt-provider"
version = "1.11.0"
description = "Qiskit provider for AQT backends"
authors = [
  "Qiskit Development Team",
  "Alpine Quantum Technologies GmbH",
]
repository = "https://github.com/qiskit-community/qiskit-aqt-provider"
documentation = "https://qiskit-community.github.io/qiskit-aqt-provider"
readme = "README.md"
license = "Apache-2.0"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
]
keywords = [
  "qiskit",
  "sdk",
  "quantum",
]

packages = [
  { include = "qiskit_aqt_provider" },
  { include = "test", format = "sdist" },
]
include = [
  "CODE_OF_CONDUCT.md",
  "CONTRIBUTING.md",
  "LICENSE.txt",
  "README.md",
]

[tool.poetry.plugins."qiskit.transpiler.scheduling"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTSchedulingPlugin"

[tool.poetry.plugins."qiskit.transpiler.translation"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTTranslationPlugin"

[tool.poetry.plugins.pytest11]
pytest_qiskit_aqt = "qiskit_aqt_provider.test.fixtures"

[tool.poetry.dependencies]
python = ">=3.9,<3.14"

annotated-types = ">=0.7.0"
httpx = ">=0.24.0"
platformdirs = ">=3"
pydantic = { version = ">=2.5.0", allow-prereleases = false }
pydantic-core = ">=2"
pytest = { version = ">=8", optional = true }
pytest-httpx = { version = "^0.34.0", optional = true }
python-dotenv = ">=1"
qiskit = { version = "^1", allow-prereleases = false }
qiskit-aer = ">=0.13.2"
qiskit-algorithms = { version = ">=0.2.1", optional = true }
qiskit-optimization = { version = ">=0.6.0", optional = true }
tabulate = ">=0.9.0"
tqdm = ">=4"
typing-extensions = ">=4.0.0"

# Restrict to versions with published wheels.
scipy = [
  { version = "^1.15", python = ">=3.10" },
  { version = "^1,<1.15", python = "<3.10" },
]

# Restrict to versions with published wheels.
numpy = [
  { version = ">=1,<2.1", python = "<=3.9" },
  { version = ">=1", python = ">3.9,<3.13" },
  { version = ">=2.1", python = ">=3.13" },
]

[tool.poetry.group.dev.dependencies]
autodoc-pydantic = "^2.0.1"
coverage = "^7.2.1"
datamodel-code-generator = "^0.28.0"
deptry = "^0.23.0"
hypothesis = "^6.82.0"
interrogate = "^1.5.0"
ipykernel = "^6.22.0"
jupyter-sphinx = "^0.5.0"
mistletoe = "^1.1.0"
mypy = "^1.14.0"
poethepoet = "^0.32.0"
polyfactory = "^2.0.0"
pytest-mock = "^3"
pytest-sugar = "^1"
pre-commit = "^3.1.1"
pyproject-fmt = "^2.1.3"
qiskit-sphinx-theme = ">=1.16.1"
qiskit = { version = "^1", extras = [
  "visualization",
] }
rich = "^13.5.3"
ruff = "^0.11.0"
sphinx = ">=7,<7.3"
sphinx-toolbox = "^3.5.0"
tach = "^0.28.0"
tomlkit = "^0.13.2"
typer = "^0.15.0"
types-requests = "^2.28.11"
types-setuptools = ">=65.7.0"
types-tabulate = "^0.9.0.1"
types-tqdm = "^4.65.0.1"
typos = "^1.29.0"
yq = "^3.4.3"

[tool.poetry.extras]
# Dependencies for the example scripts.
examples = [
  "qiskit-algorithms",
  "qiskit-optimization",
]
# Dependencies for the pytest plugin.
test = [
  "pytest",
  "pytest-httpx",
]

[tool.ruff]
target-version = "py39"
line-length = 100

lint.select = [
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "BLE",  # flake8-blind-except
  "C4",   # flake8-comprehensions
  "C90",  # mccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "E",    # pycodestyle errors
  "ERA",  # eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "NPY",  # numpy
  "PERF", # perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff specials
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLOT", # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle warnings
  "YTT",  # flake8-2020
]
lint.ignore = [
  "ANN401", # any-type
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D100",   # missing docstring in public module
  "D104",   # missing docstring in public package
  "D107",   # missing docstring in __init__
  "D206",   # indent-with-spaces
  "D211",   # no-blank-line-before-class (incompatible with D203)
  "D213",   # multiline-summary-second-line (incompatible with D212)
  "D300",   # triple-single-quotes
  "E111",   # indentation-with-invalid-multiple
  "E114",   # indentation-with-invalid-multiple-comment
  "E117",   # over-idented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q000",   # bad-quotes-inline-string
  "Q001",   # bad-quotes-multiline-string
  "Q002",   # bad-quotes-docstring
  "Q003",   # avoidable-escaped-quote
  "S311",   # suspicious-non-cryptographic-random-usage
  "SIM117", # multiple-with-statements
  "W191",   # tab-indentation
]
lint.per-file-ignores."examples/*.py" = [
  "T201", # allow prints
]
lint.per-file-ignores."qiskit_aqt_provider/api_client/models_generated.py" = [
  "D100",   # undocumented-public-module
  "D101",   # undocumented-public-class
  "E501",   # line-too-long
  "ERA001", # commented-out-code
  "UP",     # pyupgrade
]
lint.per-file-ignores."scripts/*.py" = [
  "T201", # allow prints
]
lint.per-file-ignores."test/**/*.py" = [
  "D205",    # allow multiline docstring summaries
  "PLR2004", # magic-value-comparison
  "PT011",   # allow pytest.raises without match=
  "S101",    # allow assertions
]
lint.pydocstyle.convention = "google"

[tool.deptry]
extend_exclude = [ "scripts", "test", "conftest.py" ]

[tool.coverage.run]
dynamic_context = "test_function"
relative_files = true

[tool.coverage.report]
fail_under = 99

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/.*",
  "docs/",
]

typeCheckingMode = "basic"
analyzeUnannotatedFunctions = false
reportShadowedImports = true
reportTypeCommentUsage = true
reportImportCycles = false
reportMissingImports = false
reportMissingTypeStubs = false
reportConstantRedefinition = true
reportUnnecessaryTypeIgnoreComment = false

reportDuplicateImport = "error"

pythonVersion = "3.9"
pythonPlatform = "Linux"

[tool.datamodel-codegen]
disable-timestamp = true
enable-faux-immutability = true
enum-field-as-literal = "one"
field-constraints = true
output-model-type = "pydantic_v2.BaseModel"
strict-nullable = true
target-python-version = '3.9'
use-annotated = true
use-double-quotes = true
use-field-description = true
use-schema-description = true
wrap-string-literal = true

[tool.interrogate]
ignore-module = true
ignore-nested-functions = true
ignore-magic = true
exclude = [
  "qiskit_aqt_provider/api_client/models_generated.py",
]
fail-under = 100

[tool.typos.files]
ignore-hidden = false
ignore-vcs = true
extend-exclude = [
  ".git",
]

[tool.typos.default]
extend-ignore-words-re = [
  # For consistency with pytest, prefer 'parametrize' to 'parameterize'
  "parametrized?",
  "parametrization",
]

[tool.typos.default.extend-words]
# 'aer' is the name of the Qiskit simulator backend
aer = "aer"

[tool.poe.tasks.test]
shell = """
set -eu
coverage run ${cov_opts} -m pytest --hypothesis-profile=ci
coverage report
"""

[[tool.poe.tasks.test.args]]
name = "cov_opts"
default = ""

[tool.poe.tasks.format]
shell = """
ruff format .
pyproject-fmt .
"""

[tool.poe.tasks.python_format_check]
shell = "ruff format --check ."

[tool.poe.tasks.pyproject_format_check]
shell = "pyproject-fmt --check ."

[tool.poe.tasks.typecheck]
shell = "mypy ."

[tool.poe.tasks.check_pre_commit_consistency]
shell = "./scripts/check_pre_commit_consistency.sh"

[tool.poe.tasks.check_api_models]
shell = "./scripts/api_models.py check"

[tool.poe.tasks.ruff_check]
shell = "ruff check ."

[tool.poe.tasks.docstring_coverage]
shell = "interrogate -v qiskit_aqt_provider test"

[tool.poe.tasks.spellcheck]
shell = "typos ."

[tool.poe.tasks.check_internal_dependencies]
shell = "tach check"

[tool.poe.tasks.check_external_dependencies]
# Exclude the test module because tach doesn't collect
# dependencies outside the main group.
shell = "deptry ."

[tool.poe.tasks]
lint = [
  "check_pre_commit_consistency",
  "check_api_models",
  "docstring_coverage",
  "ruff_check",
  "spellcheck",
  "check_internal_dependencies",
  "check_external_dependencies",
]
format_check = [
  "python_format_check",
  "pyproject_format_check",
]
generate-models = "./scripts/api_models.py generate"
version_check = "./scripts/package_version.py --verbose check"
docs = "sphinx-build -j auto -b html -W docs docs/_build"
all = [
  "version_check",
  "format_check",
  "lint",
  "typecheck",
  "test",
  "docs",
]
